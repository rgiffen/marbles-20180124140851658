---
stages:
- name: Deploy Marbles Application
  inputs:
  - type: git
    branch: v4.0
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  properties:
  - name: SERVICE_INSTANCE_NAME
    value: '{{sin}}'
    type: text
  - name: SAMPLE_REPO
    value: '{{SAMPLE_REPO}}'
    type: text
  jobs:
  - name: deploy-marbles-app
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      export IBP_NAME="ibm-blockchain-5-dev"
      export IBP_PLAN="ibm-blockchain-plan-v1-ga1-dev"
      export VCAP_KEY_NAME="marbles_tc_creds"

      # -----------------------------------------------------------
      # Test Code
      # -----------------------------------------------------------
      printf "\n --- Listing services for testing ---\n"
      cf services
      #cf services | sed -n 's/.*\(ibm-blockchain-plan-v1-prod\).*/\1/p'
      #cf services | sed -n 's/.*\(${SERVICE_INSTANCE_NAME}\).*/\1/p'

      # -----------------------------------------------------------
      # 1. Detect if there is already a service we should use
      # -----------------------------------------------------------
      printf "\n --- Detecting service option---\n"
      if [ "$SERVICE_INSTANCE_NAME" != "" ]; then
        echo "A service instance name was provided, lets use that"
      else
        echo "A service instance name was NOT provided, lets use the default one"
        export SERVICE_INSTANCE_NAME="davids-d2b-created"
      fi
      printf "Using service instance name '${SERVICE_INSTANCE_NAME}'\n"

      # -----------------------------------------------------------
      # Test if everything we need is set
      # -----------------------------------------------------------
      printf "\n --- Testing if the script has what it needs ---\n"
      export SCRIPT_ERROR="nope"
       if [ "$IBP_NAME" == "" ]; then
        echo "Error - bad script setup - IBP_NAME was not provided (IBM Blockchain service name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$IBP_PLAN" == "" ]; then
        echo "Error - bad script setup - IBP_PLAN was not provided (IBM Blockchain service's plan name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$VCAP_KEY_NAME" == "" ]; then
        echo "Error - bad script setup - VCAP_KEY_NAME was not provided (Bluemix service credential key name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$SERVICE_INSTANCE_NAME" == "" ]; then
        echo "Error - bad script setup - SERVICE_INSTANCE_NAME was not provided (IBM Blockchain service instance name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$CF_APP" == "" ]; then
        echo "Error - bad script setup - CF_APP was not provided (Marbles application name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$SCRIPT_ERROR" == "yep" ]; then
        exit 1
      fi

      # -----------------------------------------------------------
      # 2. Create a service, this is okay to run if the service already exists as long as its the same typeof service
      # -----------------------------------------------------------
      printf "\n --- Creating an instance of the IBM Blockchain Platform service ---\n"
      cf create-service ${IBP_NAME} ${IBP_PLAN} ${SERVICE_INSTANCE_NAME}
      cf create-service-key ${SERVICE_INSTANCE_NAME} ${VCAP_KEY_NAME}

      # -----------------------------------------------------------
      # 3. Get service credentials into our fs, (remove the first two lines from cf service-key output)
      # -----------------------------------------------------------
      printf "\n --- Getting service credentials ---\n"
      cf service-key ${SERVICE_INSTANCE_NAME} ${VCAP_KEY_NAME} > ./config/temp.txt
      tail -n +2 ./config/temp.txt > ./config/marbles_tc.json
      printf "\n --- testing temp.txt --- \n"
      cat ./config/temp.txt -b
      printf "\n --- testing marbles_tc.json --- \n"
      cat ./config/marbles_tc.json -b

      # -----------------------------------------------------------
      # 4. Push app (don't start yet, wait for binding)
      # -----------------------------------------------------------
      printf "\n --- Creating the Marbles application ---\n"
      cf push $CF_APP --no-start

      # -----------------------------------------------------------
      # 5. Bind app to the blockchain service
      # -----------------------------------------------------------
      printf "\n --- Binding the IBM Blockchain Platform service to Marbles ---\n"
      cf bind-service $CF_APP ${SERVICE_INSTANCE_NAME} -c "{\"permissions\":\"read-only\"}"

      # -----------------------------------------------------------
      # 6. Start her up
      # -----------------------------------------------------------
      printf "\n --- Starting Marbles ---\n"
      cf start $CF_APP
      #cf restage $CF_APP - this is not needed if we bind before starting

      # -----------------------------------------------------------
      # 7. Install and instantiate the chaincode - dsh disabled for now - todo bring it back
      # -----------------------------------------------------------
      #printf "\n --- Setting up for deployment ---\n"
      #export PATH=/opt/IBM/node-v6.7.0/bin:$PATH
      #npm install
      #printf "\n --- Deploying Chaincode ---\n"
      #node ./scripts/deploy_chaincode.js || true

      printf "\n\n --- We are done here. ---\n\n"
